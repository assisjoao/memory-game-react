{"version":3,"sources":["components/CardElement.js","components/GameBoard.js","components/GameOver.js","game/game.js","MemoryGame.js","reportWebVitals.js","index.js"],"names":["CardElement","props","onClick","handleFlip","card","id","className","flipped","src","icon","alt","GameBoard","cards","map","index","GameOver","show","handleRestart","game","lockMode","firstCard","secondCard","techs","setCard","this","filter","checkMatch","clearCards","unflipCards","checkGameOver","length","creatCardsFromTechs","forEach","tech","push","createPairFromTech","flatMap","pair","shuffleCards","createIdWithTech","parseInt","Math","random","currentIndex","randomIndex","floor","flipCard","cardId","gameOverCallBack","noMatchCallBack","setTimeout","MemoryGame","useState","gameOver","setGameOver","setCards","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.382b127c.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function CardElement(props){\n    return (\n        <div onClick={() => {props.handleFlip(props.card)}} id={props.card.id} className={`card ${props.card.flipped ? 'flip' : ''}`}>\n            <div className='card_front'>\n                <img className='icon' \n                src={`assets/images/${props.card.icon}.png`} \n                alt={props.card.icon}></img>\n            </div>\n            <div className='card_back'>\n                {'</>'}\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport CardElement from './CardElement';\n\nexport default function GameBoard(props){\n    return (\n        <div id='gameBoard'>\n            {props.cards.map((card,index) =>\n                <CardElement handleFlip={props.handleFlip} key={index} card={card}></CardElement>)}\n        </div>\n    )\n};","import React, { Fragment } from 'react';\n\n\nexport default function GameOver(props){\n\n    return (props.show?\n        <div id=\"gameOver\">\n            <div>\n                Parabéns, você ganhou!!\n            </div>\n            <button id=\"restart\" onClick={props.handleRestart}>Reiniciar!</button>\n        </div> : <Fragment />\n    )\n}","let game = {\n\n    lockMode : false,\n    firstCard : null,\n    secondCard : null,\n\n    techs : ['bootstrap',\n    'css',\n    'electron',\n    'firebase',\n    'html',\n    'javascript',\n    'jquery',\n    'mongo',\n    'node',\n    'react'],\n\n    cards : null,\n\n    setCard : function(id){\n\n        let card = this.cards.filter(card => card.id === id)[0];\n        \n        if (card.flipped || this.lockMode) {\n            return false;\n        }\n\n        if (!this.firstCard) {\n            this.firstCard = card;\n            this.firstCard.flipped = true;\n            return true;\n        } else {\n            this.secondCard = card;\n            this.lockMode = true;\n            this.secondCard.flipped = true;\n            return true;\n        }\n\n    },\n\n    checkMatch : function () {\n        if (!this.firstCard || !this.secondCard){\n            return false;\n        }\n        return (this.firstCard.icon === this.secondCard.icon)\n    },\n\n    clearCards : function () {\n        this.firstCard = null;\n        this.secondCard = null;\n        this.lockMode = false;\n    },\n\n    unflipCards(){\n        this.firstCard.flipped = false;\n        this.secondCard.flipped = false;\n        this.clearCards();\n    },\n\n\n    checkGameOver() {\n        return this.cards.filter(card => !card.flipped).length === 0;\n    },\n\n    creatCardsFromTechs : function() {\n        this.cards = [];\n    \n        this.techs.forEach((tech) => {\n            this.cards.push(this.createPairFromTech(tech));\n        })\n    \n        this.cards = this.cards.flatMap(pair => pair);\n        this.shuffleCards();\n        return this.cards;\n        },\n    \n    createPairFromTech : function(tech) {\n    \n        return [{\n            id: this.createIdWithTech(tech),\n            icon: tech,\n            flipped: false,\n        }, {\n            id: this.createIdWithTech(tech),\n            icon: tech,\n            flipped: false,\n        }]\n    },\n    \n    createIdWithTech : function(tech) {\n        return tech + parseInt(Math.random() * 1000);\n    },\n\n    shuffleCards : function(cards) {\n        let currentIndex = this.cards.length;\n        let randomIndex = 0;\n    \n        while (currentIndex !==0) {\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex--;\n    \n            [this.cards[randomIndex], this.cards[currentIndex]] = [this.cards[currentIndex], this.cards[randomIndex]];\n        }\n    },\n\n    flipCard: function(cardId, gameOverCallBack, noMatchCallBack) {\n        if (this.setCard (cardId)) {\n            if (this.secondCard){\n                if (this.checkMatch()){\n                    this.clearCards();\n                    if(this.checkGameOver()){\n                        gameOverCallBack();\n                    };\n                }else {\n                    setTimeout(() => {\n                        this.unflipCards();\n                        noMatchCallBack();\n                    }, 1000);\n                };\n            }; \n        };\n    }\n}\n\nexport default game;","import React, { useEffect, useState } from 'react';\nimport GameBoard from './components/GameBoard';\nimport GameOver from './components/GameOver';\nimport game from './game/game'\n\nexport default function MemoryGame(){\n\n    const [gameOver, setGameOver] = useState(false);\n    const [cards, setCards] = useState([]);\n\n    useEffect(()=>{\n        setCards(game.creatCardsFromTechs())\n    }, [])\n\n    function restart(){\n        game.clearCards()\n        setCards(game.creatCardsFromTechs())\n        setGameOver(false);\n    }\n\n    function handleFlip(card) {\n        game.flipCard(card.id, () => {\n            setGameOver(true)\n        }, () => {\n            setCards([...game.cards])\n        })\n        setCards([...game.cards])\n    }\n\n\n    return (\n        <div>\n            <GameBoard handleFlip={handleFlip} cards={cards}></GameBoard>\n            <GameOver show={gameOver} handleRestart={restart}></GameOver>\n        </div>\n    )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MemoryGame from './MemoryGame';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MemoryGame />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}